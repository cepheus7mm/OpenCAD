<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Light Theme Colors - Modern, Soft, and Visually Appealing -->
    <Color x:Key="PrimaryBackgroundColor">#FAFAFA</Color>
    <Color x:Key="SecondaryBackgroundColor">#F0F2F5</Color>
    <Color x:Key="TertiaryBackgroundColor">#E8EAED</Color>
    <Color x:Key="PrimaryTextColor">#1A1A1A</Color>
    <Color x:Key="SecondaryTextColor">#4A4A4A</Color>
    <Color x:Key="BorderColor">#D1D5DB</Color>
    <Color x:Key="AccentColor">#2563EB</Color>

    <!-- Titlebar Colors - Subtle and Professional -->
    <Color x:Key="TitleBarBackgroundColor">#F8F9FA</Color>
    <Color x:Key="TitleBarTextColor">#2C2C2C</Color>
    <Color x:Key="TitleBarButtonHoverColor">#E9ECEF</Color>
    <Color x:Key="TitleBarButtonPressedColor">#DEE2E6</Color>
    <Color x:Key="CloseButtonHoverColor">#E63946</Color>
    <Color x:Key="CloseButtonPressedColor">#C1121F</Color>

    <!-- Light Theme Brushes -->
    <SolidColorBrush x:Key="PrimaryBackgroundBrush" Color="{StaticResource PrimaryBackgroundColor}" />
    <SolidColorBrush x:Key="SecondaryBackgroundBrush" Color="{StaticResource SecondaryBackgroundColor}" />
    <SolidColorBrush x:Key="TertiaryBackgroundBrush" Color="{StaticResource TertiaryBackgroundColor}" />
    <SolidColorBrush x:Key="PrimaryTextBrush" Color="{StaticResource PrimaryTextColor}" />
    <SolidColorBrush x:Key="SecondaryTextBrush" Color="{StaticResource SecondaryTextColor}" />
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}" />
    <SolidColorBrush x:Key="AccentBrush" Color="{StaticResource AccentColor}" />

    <!-- Titlebar Brushes -->
    <SolidColorBrush x:Key="TitleBarBackgroundBrush" Color="{StaticResource TitleBarBackgroundColor}" />
    <SolidColorBrush x:Key="TitleBarTextBrush" Color="{StaticResource TitleBarTextColor}" />
    <SolidColorBrush x:Key="TitleBarButtonHoverBrush" Color="{StaticResource TitleBarButtonHoverColor}" />
    <SolidColorBrush x:Key="TitleBarButtonPressedBrush" Color="{StaticResource TitleBarButtonPressedColor}" />
    <SolidColorBrush x:Key="CloseButtonHoverBrush" Color="{StaticResource CloseButtonHoverColor}" />
    <SolidColorBrush x:Key="CloseButtonPressedBrush" Color="{StaticResource CloseButtonPressedColor}" />

    <!-- Output Window specific colors for Light Theme -->
    <SolidColorBrush x:Key="OutputBackgroundBrush">#FAFAFA</SolidColorBrush>
    <SolidColorBrush x:Key="OutputForegroundBrush">#1A1A1A</SolidColorBrush>

    <!-- Menu and Toolbar Colors -->
    <SolidColorBrush x:Key="MenuBackgroundBrush" Color="{StaticResource SecondaryBackgroundColor}" />
    <SolidColorBrush x:Key="ToolBarBackgroundBrush" Color="{StaticResource TertiaryBackgroundColor}" />
    <SolidColorBrush x:Key="StatusBarBackgroundBrush" Color="{StaticResource SecondaryBackgroundColor}" />

    <!-- Control Styles for Light Theme -->

    <!-- ToolBar Button Style -->
    <Style TargetType="{x:Type Button}" x:Key="ToolBarButtonStyle">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" 
    Background="{TemplateBinding Background}"
   BorderBrush="{TemplateBinding BorderBrush}"
    BorderThickness="{TemplateBinding BorderThickness}"
 Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TitleBarButtonHoverBrush}"/>
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TitleBarButtonPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolBar Thumb (Gripper) Style -->
    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Cursor" Value="SizeAll"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="Transparent" SnapsToDevicePixels="True">
                        <Canvas Width="9" Height="9" SnapsToDevicePixels="True">
                            <Rectangle Width="3" Height="3" Fill="{DynamicResource SecondaryTextBrush}" Canvas.Left="0" Canvas.Top="0"/>
                            <Rectangle Width="3" Height="3" Fill="{DynamicResource SecondaryTextBrush}" Canvas.Left="0" Canvas.Top="6"/>
                            <Rectangle Width="3" Height="3" Fill="{DynamicResource SecondaryTextBrush}" Canvas.Left="6" Canvas.Top="0"/>
                            <Rectangle Width="3" Height="3" Fill="{DynamicResource SecondaryTextBrush}" Canvas.Left="6" Canvas.Top="6"/>
                        </Canvas>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolBar OverflowButton Style -->
    <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border" 
 Background="{TemplateBinding Background}"
       SnapsToDevicePixels="True"
   Width="15">
                        <Path x:Name="arrow"
 Fill="{DynamicResource PrimaryTextBrush}"
   Data="M 0,3 L 3,0 L 6,3 Z"
    HorizontalAlignment="Center"
VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TitleBarButtonHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource TitleBarButtonPressedBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolBar Style with Complete Template -->
    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource ToolBarBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border x:Name="Border"
       Background="{TemplateBinding Background}"
  BorderBrush="{TemplateBinding BorderBrush}"
  BorderThickness="{TemplateBinding BorderThickness}"
       Padding="{TemplateBinding Padding}">
                        <DockPanel>
                            <Thumb x:Name="ToolBarThumb"
     Style="{StaticResource ToolBarThumbStyle}"
 DockPanel.Dock="Left"
    Margin="0,0,6,0"/>
                            <ToggleButton x:Name="ToolBarOverflowButton"
         Style="{StaticResource ToolBarOverflowButtonStyle}"
      DockPanel.Dock="Right"
    IsEnabled="{TemplateBinding HasOverflowItems}"
      IsChecked="{Binding Path=IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
          ClickMode="Press">
                                <Popup x:Name="OverflowPopup"
AllowsTransparency="True"
      Placement="Bottom"
   IsOpen="{Binding Path=IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
    StaysOpen="False"
         Focusable="False"
    PopupAnimation="Slide">
                                    <Border Background="{DynamicResource ToolBarBackgroundBrush}"
         BorderBrush="{DynamicResource BorderBrush}"
         BorderThickness="1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
  Margin="2"
     WrapWidth="200"
 Focusable="True"
  FocusVisualStyle="{x:Null}"
  KeyboardNavigation.TabNavigation="Cycle"
      KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Border>
                                </Popup>
                            </ToggleButton>
                            <ToolBarPanel x:Name="PART_ToolBarPanel"
    IsItemsHost="True"
        Margin="0,1,2,2"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarOverflowButton" Property="IsEnabled" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Separator Style for MenuItem -->
    <Style TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="26,2,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderBrush="{DynamicResource BorderBrush}" 
    BorderThickness="0,1,0,0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem Style -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Background" Value="{DynamicResource MenuBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" 
   Background="{TemplateBinding Background}"
      BorderBrush="{TemplateBinding BorderBrush}"
         BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="14"/>
                            </Grid.ColumnDefinitions>

                            <!-- Icon -->
                            <ContentPresenter x:Name="Icon"
     Grid.Column="0"
 Margin="4,0,6,0"
            VerticalAlignment="Center"
    ContentSource="Icon"/>

                            <!-- Check Mark -->
                            <Border x:Name="GlyphPanel"
      Grid.Column="0"
   Visibility="Collapsed"
            Width="16"
          Height="16"
               Margin="4,0,6,0"
   Background="{DynamicResource AccentBrush}"
   BorderBrush="{DynamicResource BorderBrush}"
 BorderThickness="1"
           CornerRadius="2">
                                <Path x:Name="Glyph"
         Width="10"
               Height="10"
  Fill="{DynamicResource PrimaryBackgroundBrush}"
        Data="M 0,5 L 3,8 L 8,1"
            Stroke="{DynamicResource PrimaryBackgroundBrush}"
                StrokeThickness="1.5"/>
                            </Border>

                            <!-- Header -->
                            <ContentPresenter Grid.Column="1"
       ContentSource="Header"
           Margin="6,3,6,3"
                  RecognizesAccessKey="True"
        VerticalAlignment="Center"/>

                            <!-- Input Gesture Text -->
                            <TextBlock Grid.Column="2"
        Text="{TemplateBinding InputGestureText}"
          Margin="6,3,6,3"
          VerticalAlignment="Center"
        Foreground="{DynamicResource SecondaryTextBrush}"/>

                            <!-- Submenu Arrow -->
                            <Path x:Name="ArrowPanel"
    Grid.Column="3"
           VerticalAlignment="Center"
        Margin="4,0,4,0"
           Fill="{DynamicResource PrimaryTextBrush}"
         Data="M 0,0 L 4,4 L 0,8 Z"
            Visibility="Collapsed"/>

                            <!-- Submenu Popup -->
                            <Popup x:Name="PART_Popup"
          AllowsTransparency="True"
      Placement="Right"
    HorizontalOffset="-2"
     IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
        Focusable="False"
                  PopupAnimation="Fade">
                                <Border Background="{DynamicResource MenuBackgroundBrush}"
   BorderBrush="{DynamicResource BorderBrush}"
 BorderThickness="1"
   Padding="2">
                                    <StackPanel IsItemsHost="True"
              KeyboardNavigation.DirectionalNavigation="Cycle"
         Grid.IsSharedSizeScope="True"/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Show arrow for submenu items -->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Padding" Value="6,3"/>
                            <Setter TargetName="PART_Popup" Property="Placement" Value="Bottom"/>
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="6,3"/>
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="ArrowPanel" Property="Visibility" Value="Visible"/>
                        </Trigger>

                        <!-- Checkable item -->
                        <Trigger Property="IsCheckable" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Collapsed"/>
                        </Trigger>

                        <!-- Hover effect -->
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TitleBarButtonHoverBrush}"/>
                        </Trigger>

                        <!-- Disabled state -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!-- Pressed/Open state -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TitleBarButtonPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsSubmenuOpen" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource TitleBarButtonHoverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu/ContextMenu-only separator style -->
<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="Separator">
    <Setter Property="Height" Value="1"/>
    <!-- Adjust left indent as desired -->
    <Setter Property="Margin" Value="2,2,0,2"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="Separator">
                <Border Background="Transparent">
                    <Border BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0,1,0,0"/>
                </Border>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
</Style>
</ResourceDictionary>